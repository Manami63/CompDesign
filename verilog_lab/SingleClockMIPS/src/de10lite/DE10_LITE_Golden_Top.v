// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================



	// CLOCK
	input MAX10_CLK1_50,

	// KEYs and SWITCHes
	input  [1:0] KEY,
	input  [9:0] SW,

	// HEX Display
	output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5,

	// LEDs
	output [9:0] LEDR
);

	// クロック・リセット
	wire RST = SW[9];
	wire STEP_CLK = KEY[0];

	// MIPS内部信号
	wire [31:0] PC, Result, Rdata1, Rdata2, Wdata, nextPC;
	wire [15:0] selected_val;
	wire [4:0] led_indicator;

	// MIPS本体
	SingleClockMIPS mips (
		.CLK(STEP_CLK),
		.RST(RST),
		.W_Ins(32'b0),
		.WE(1'b0),
		.PC(PC),
		.Result(Result),
		.Rdata1(Rdata1),
		.Rdata2(Rdata2),
		.Wdata(Wdata),
		.nextPC(nextPC)
	);

	// 表示選択モジュール
	Selector selector (
		.sw(SW[2:0]),
		.Rdata1(Rdata1),
		.Rdata2(Rdata2),
		.Result(Result),
		.Wdata(Wdata),
		.nextPC(nextPC),
		.selected(selected_val),
		.LED(led_indicator)
	);

	// 7セグ変換
	SEG7DEC s0 (.DIN(selected_val[3:0]),   .dot_enable(1'b0), .seg_out(HEX0));
	SEG7DEC s1 (.DIN(selected_val[7:4]),   .dot_enable(1'b0), .seg_out(HEX1));
	SEG7DEC s2 (.DIN(selected_val[11:8]),  .dot_enable(1'b0), .seg_out(HEX2));
	SEG7DEC s3 (.DIN(selected_val[15:12]), .dot_enable(1'b0), .seg_out(HEX3));

	SEG7DEC s4 (.DIN(PC[5:2]), .dot_enable(1'b0), .seg_out(HEX4));
	SEG7DEC s5 (.DIN(PC[9:6]), .dot_enable(1'b0), .seg_out(HEX5));

	// 表示中の信号名をLEDで示す
	assign LEDR[4:0] = led_indicator;
	assign LEDR[9:5] = 5'b00000; // 未使用




//=======================================================
//  Structural coding
//=======================================================



endmodule
